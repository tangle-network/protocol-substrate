// This file is part of Webb.

// Copyright (C) 2022 Webb Technologies Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for pallet_hasher
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-24, STEPS: `20`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/webb-standalone-node
// benchmark
// pallet
// --chain=dev
// --steps=20
// --repeat=1
// --log=warn
// --pallet=pallet-hasher
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./pallets/hasher/src/weights.rs
// --template=./.maintain/webb-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_hasher.
pub trait WeightInfo {
	fn force_set_parameters(c: u32, ) -> Weight;
}

/// Weights for pallet_hasher using the Substrate node and recommended hardware.
pub struct WebbWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for WebbWeight<T> {
	/// Storage: HasherBn254 Parameters (r:1 w:1)
	/// Proof: HasherBn254 Parameters (max_values: Some(1), max_size: Some(10002), added: 10497, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 10000]`.
	fn force_set_parameters(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6604`
		//  Estimated: `10497`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_214_525, 10497)
			// Standard Error: 186
			.saturating_add(Weight::from_parts(527, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: HasherBn254 Parameters (r:1 w:1)
	/// Proof: HasherBn254 Parameters (max_values: Some(1), max_size: Some(10002), added: 10497, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 10000]`.
	fn force_set_parameters(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6604`
		//  Estimated: `10497`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_214_525, 10497)
			// Standard Error: 186
			.saturating_add(Weight::from_parts(527, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}