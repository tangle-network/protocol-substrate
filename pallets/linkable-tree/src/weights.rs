//! Autogenerated weights for `pallet_linkable_tree`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/webb-standalone-node
// benchmark
// --chain=dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_linkable_tree
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --raw
// --output
// ./pallets/linkable-tree/src/weights.rs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn create(i: u32, d: u32, ) -> Weight;
	fn set_maintainer() -> Weight;
	fn force_set_maintainer() -> Weight;
}

/// Weight functions for `pallet_linkable_tree`.
pub struct WebbWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for WebbWeight<T> {
	// Storage: MerkleTree NextTreeId (r:1 w:1)
	// Storage: MerkleTree DefaultHashes (r:1 w:0)
	// Storage: MerkleTree Trees (r:0 w:1)
	// Storage: LinkableTree MaxEdges (r:0 w:1)
	fn create(i: u32, d: u32, ) -> Weight {
		Weight::from_ref_time(53_487_000)
			// Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(4_000_u64).saturating_mul(i as u64))
			// Standard Error: 33_000
			.saturating_add(Weight::from_ref_time(43_000_u64).saturating_mul(d as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: LinkableTree Maintainer (r:1 w:1)
	fn set_maintainer() -> Weight {
		Weight::from_ref_time(38_000_000)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: LinkableTree Maintainer (r:1 w:1)
	fn force_set_maintainer() -> Weight {
		Weight::from_ref_time(32_000_000)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

#[allow(unused_variables)]
impl WeightInfo for () {
	fn create(i: u32, d: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_maintainer() -> Weight {
		Weight::from_ref_time(0)
	}
	fn force_set_maintainer() -> Weight {
		Weight::from_ref_time(0)
	}
}
